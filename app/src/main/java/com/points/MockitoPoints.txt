
1. When object is mocked with either @Mock or Mock(Student.class) then only the added behaviour methods like ( when().thenReturn()) methods will give appropriate values others WILL NOT EVEN CALL THE REAL METHOD ( like it return 0 if integer return type ... )
2. If u want partial mocking then use Spy(new Student()) n use few when().thenReturns() -> REST METHODS WILL CALL THE REAL METHODS DIRECTLY.
3. In @Mock object if u want to call real method ( which is not defined in when().thenReturn()) then do
Mockito.doCallRealMethod().when(student).samplePrint();   // For mocked object in case u want to call Real object implementation for it use doCallRealMethod or use Spy object ...
       student.samplePrint();  // will call real method n prints.

4. To override a void method then use below
       doAnswer(invocation -> {   // to override void method use doAnswer with when.
             System.out.println(" overriding void method behaviour");
             return null;
         }).when(student).voidMethodDoingNothing();

5. Verify method u see how many times that method is called ...  Mockito.verify(student, atLeastOnce()).getAge();
6. If we want custom returnValue based on input arguments then use ThenANSWER  than ThenRETURN
Mockito.when(student.getPersonalizedName("sampleName")).thenAnswer(new Answer<Object>() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                String argument = (String) invocation.getArgument(0);
                if(argument.contains("sample")){
                    return "MockitoChangedSampleName";
                }
                return argument;
            }
        });
System.out.println(" personalizedName for sampleName is  " + student.getPersonalizedName("sampleName") + " personalizedName for dummyName is " + student.getPersonalizedName("dummyName"));