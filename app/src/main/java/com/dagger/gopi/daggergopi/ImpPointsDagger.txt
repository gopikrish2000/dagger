*********** Imp Points **********

1. Constructor injection can be any where in the code ( see OutsidePojoWithInject)
2. For member injection ( instance variables @Inject) we have to get Component Object & either use inject(this) or write seperate methods to get what objects u require from it.

3. If for a module(ActivityB) u don't want to expose all the object but only some part of it then DONT add injectActivityB(ActivityB act) in component interface then it cannot use @Inject for members & Expose few methods in component interface for it to get.

 @Component(modules = { DaggerFirstModule.class, DaggerSecondModule.class})  // either comma seperated multiple classes or
public interface FirstDaggerComponent {
    void injectMainActivity(MainActivity mainActivity); // This will make @Inject work in main activity.
    // DON't write injectActivityB(ActivityB act) to not expose @Inject in ActivityB

    Executor getExposePartialImplementationWithoutAllDependencies(); // Will Expose functionality for child/Dependent components. Can be used by everyone including ActivityB.
}

4. Inside Module with @Provides u can directly use other @Provides dependencies
    @Provides                       //provides method can internally use the other @Provides methods like Executor & String[] of DaggerSecondModule
    public Pair<Executor, String[]> provideExecutorPair(Executor executor, @Named("dummyStringAry") String[] stringAry) {
        return Pair.create(executor, stringAry);
    }

5. @Singleton ( Global Singletons) scope will work based on number of times u created Component ( DaggerFirstDaggerComponent.create()). If called once in Application Class & expose FirstDaggerComponent getComponent() method for everyone to use it. [ Global Singletons create component in Application class]

6. Local Singletons -> nothing but create DaggerFirstComponent.create() in activity start ( n pass to fragments, adapters same instance) & use a custom Scope like @Singleton or @PerActivity then every time activity is created these local Singletons will be created again.

7. If not put as @Singleton then number of times Dagger injects that it creates those many times the objects. So put @Singleton & create component in Application Class for Global Singletons.

8. Number of Objects created of @Provides method is
  If no scope defined then -> (Number of Times u create DaggerFirstComponent.create() those many instances will be created * Number of times that Object is injected in code)
  Else if scope defined then -> Number of Times u create DaggerFirstComponent.create() those many instances will be created  [ regarless of no. of injections ]

9. For Both DependsOn Child Components or SubComponents writing same method in interface of parent & in child Works fine. Like childComponent.sameMethodInParent() giving proper values.

/// *** Working fine of DependsOn Component (getProvidedExecutorOfParent() method similar method is defined in the parent.)
FirstDaggerComponent firstDaggerComponent = DaggerFirstDaggerComponent.builder().daggerFirstModule(new DaggerFirstModule()).daggerSecondModule(new DaggerSecondModule(getApplicationContext())).build();  // if no Module has a constructor then directly use "DaggerFirstDaggerComponent.create();"
        DependentDaggerComponent dependentDaggerComponent = DaggerDependentDaggerComponent.builder().firstDaggerComponent(firstDaggerComponent).dependentDaggerModule(new DependentDaggerModule()).build();
        dependentDaggerComponent.getProvidedExecutorOfParent().execute(() -> System.out.println(" Same method as parent working fine in Dependent Component as well"));
/// ****** DependsOn Component ends here *** ///

/// *** Working fine of Sub Component (getProvidedExecutorOfParent() method similar method is defined in the parent.)
        SubDaggerParentComponent subDaggerParentComponent = DaggerSubDaggerParentComponent.create();
        SubDaggerChildComponent childSubComponent = subDaggerParentComponent.getChildSubComponent();
        System.out.println(childSubComponent.getParentDummyStringArray()); // Works fine
/// ***** Sub Component ends here **** ///


10. Imp differences between DependsOn & Subcomponent. ( ***** )
    a. DependsOn just has access to Wrapper methods exposed in parent & if u put same return time method in ChildDependsOn then it works . BUT SubComponent u no need to declare wrapper methods ( bcoz Subcomponent has complete knowledge about Dependency Graph where as DependsOn only knows about exposed methods. )
    b. DependsOn Components can be independent But SubComponent u explicitly need to declare Child Component Definition in Parent Component Interface.
    c. Inject is not working for both DependsOn & Subcomponent ( donno why)???

Doubts::
. Depends vs SubComponents.  both cases @Inject of child dependencies not working.

1. Inject is not working for both DependsOn & Subcomponent ( donno why)???
2. @Scope should be different for DependsOn Component.... ?
3. What is use of scope.